对所有的字符串指针执行这个交换过程。如果在遍历字符串时需要交换它们，就把 sorted设定为false,重复整个for循环。如果重复for循环时没有互换任何字符串，就表 示字符串已完成排序了。用bool变量sorted跟踪其状态。它在每个循环的开始设为true, 但是只要发生互换操作，就将它设回false。如果退出循环时，sorted仍然是true,就表 示没有发生互换操作，所以每个字符串都已排好序；因而退出while循环。
//	pS[i + 1]
排序在while循环内部进行：只要sorted是false,循环就继续。在排序时，要在for 循环内使用strcmpO函数比较连续的一对字符串。如果第一个字符串大于第二个字符串， 就交换指针值。使用指针是交换顺序的一种非常经济的方法。这些字符串本身仍旧在它 原来的内存中，而只是在指针数组pS中交换它们的地址顺序。交换指针所需的时间是移 动所有字符串所需时间的一部分。
这个排序不是很好的原因是，每次遍历所有的项时，仅将一个值移动一个位置。最 坏的情况是，第一项在最后的位置上，此时重复这个过程的次数是列表里的项数减1。 这个效率低却很有名的方法叫做冒泡排序(bubble sort)。
以这种方式使用指针处理字符串和其他类型的数据，是C语言中一个相当强大的机 制。可以将基本数据(在这个例子中是字符串)以任意顺序放在一块内存里，然后只需改 变指针，就可以用任意顺序处理它们，而完全不用移动它们。可以使用这个例子的方法 作为排序任何文本的基础。然而，最好使用一个比较好的排序方法。
对所有的字符串指针执行这个交换过程。如果在遍历字符串时需要交换它们，就把 sorted设定为false,重复整个for循环。如果重复for循环时没有互换任何字符串，就表 示字符串已完成排序了。用bool变量sorted跟踪其状态。它在每个循环的开始设为true, 但是只要发生互换操作，就将它设回false。如果退出循环时，sorted仍然是true,就表 示没有发生互换操作，所以每个字符串都已排好序；因而退出while循环。
//	pS[i + 1]
排序在while循环内部进行：只要sorted是false,循环就继续。在排序时，要在for 循环内使用strcmpO函数比较连续的一对字符串。如果第一个字符串大于第二个字符串， 就交换指针值。使用指针是交换顺序的一种非常经济的方法。这些字符串本身仍旧在它 原来的内存中，而只是在指针数组pS中交换它们的地址顺序。交换指针所需的时间是移 动所有字符串所需时间的一部分。
这个排序不是很好的原因是，每次遍历所有的项时，仅将一个值移动一个位置。最 坏的情况是，第一项在最后的位置上，此时重复这个过程的次数是列表里的项数减1。 这个效率低却很有名的方法叫做冒泡排序(bubble sort)。
以这种方式使用指针处理字符串和其他类型的数据，是C语言中一个相当强大的机 制。可以将基本数据(在这个例子中是字符串)以任意顺序放在一块内存里，然后只需改 变指针，就可以用任意顺序处理它们，而完全不用移动它们。可以使用这个例子的方法 作为排序任何文本的基础。然而，最好使用一个比较好的排序方法。
