另一个例子就是用?：运算符以自然语言方式输出布尔变量的值^值得注意的是，b〇〇l类 型不是标准C语言的一部分，因此没有内建的输出布尔型值的机制。尽管如此，还是可以使用 printf和？：来显示布尔型变量errorFlag的值：
print, f f " %d i t.em%s f oxind \n" , n I terns, (nlteme， > 1} ? " s " ： n 11 ) ■
输出时，如果nltems的值大于1,则在宇符串item后加上一个字符串s，反之就加上一个空 字符串。
printf ^"errorFlag 二 %s\n\ (errorFiag) ? "TRUE" :	n FALSE");
在c语言中，可能会过度使用？：运算符，如果一个程序中重要的判断结构隐藏在这种嵌套 的？：运算符中，后面的代码很可能就会遗漏这个判断。另一方面，如果可以使用？：代替复杂 的if语句来处理一些小的细节，那它将大大简化程序的结构9
另一个例子就是用?：运算符以自然语言方式输出布尔变量的值^值得注意的是，b〇〇l类 型不是标准C语言的一部分，因此没有内建的输出布尔型值的机制。尽管如此，还是可以使用 printf和？：来显示布尔型变量errorFlag的值：
print, f f " %d i t.em%s f oxind \n" , n I terns, (nlteme， > 1} ? " s " ： n 11 ) ■
输出时，如果nltems的值大于1,则在宇符串item后加上一个字符串s，反之就加上一个空 字符串。
printf ^"errorFlag 二 %s\n\ (errorFiag) ? "TRUE" :	n FALSE");
在c语言中，可能会过度使用？：运算符，如果一个程序中重要的判断结构隐藏在这种嵌套 的？：运算符中，后面的代码很可能就会遗漏这个判断。另一方面，如果可以使用？：代替复杂 的if语句来处理一些小的细节，那它将大大简化程序的结构9
