在程序的下一行，字符’广被赋给字符变量c。因为char_pointer仍然 指向变量c，所以在后续printf()调用中显不*(：1131：_9〇:111七6]：的值时，就 会在终端上正确显示c的这一新值。这是一个很重要的概念。除非 char_pointer的值发生了变化，否则表达式*char_pointer总是访问c 的值。因此，当c的值发生变化时，★char_pointer的值也发生变化。
一定要记住，在C语言中，在将一个指针设定为指向某一对象之前，它的 值是没有意义的。
第一个printf ()调用只是显不变量c的内容，以及char_pointer引 用的变量的内容。因为我们将char_pointer设定为指向变量c，所以显示 出来的值是c的内容，由程序输出的第一行可以验证这一点。
前面的讨论可以帮助理解该程序中的后续语句是如何工作的。除非 char_pointer发生变化，否则表达式*char_pointer总是引用c的值。 因此，表达式
*char_pointer ='('；
