在对指针进行加、减运算时，数字“1”不再代表十进制整数“1”，而是指1个存储单元长度。 至于1个长度占多少字节的存储空间，则视指针的基类型而定。如果P和q的基类型是int，位 移1个存储单元长度就是位移4个字节；如果p和q的基类型是字符型，则位移1个存储单元长 度就是位移1个字节；若P和q的基类型是双精度型，则位移1个存储单元长度就是位移8个字 节；其他以此类推。增1表示指针向地址值大（高地址）的方向移动一个存储单元，减1表示向 地址值小（低地址）的方向移动一个存储单元。因此当我们在程序中移动指针时，无论指针的基 类型是什么，只需简单的加、减一个整数而不必去管它移动的具体长度，系统将会根据指针的基 类型自动地来确定位移的字节数。
P++;	/ *当前指针p和q的指向如图8. 6 (b)所示* /
现在若有语句i = * P; j = * q;则i中的值为22，j中的值为44;若有语句k = q - p;则k中 的值为2。
当移动指针时，基类型为int的指针只能用来指向int变量，不能用以指向其他类型的变量。 如果用基类型为int的指针来指向一串double类型的变量，当移动指针时，对于整数1,系统将按 照基类型来确定移动4个字节而不是移动8个字节。
8.4.3指针比较
