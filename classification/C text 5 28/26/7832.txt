可以使用malloc()函数来为数组分配存储空间，与为字符串分配存储空间是类似的。 不同之处在于任意数组的元素可以是各种类型，当然也可以和字符串一样是字符型，那 么每个数组元素都未必只占有一个字节，因此需要使用sizeof运算符来计算出每个数组 元素所需要的空间大小。
在前面编写程序时，如果要使用数组，那么必须预先为其指定大小，而在有些情况 下，常常很难估计出数组适合的大小。试想下，如果能在程序运行时根据需要来确定数 组的实际大小就完美了。c语言中允许在程序执行期间为数组分配空间，并通过指向第 一个数组元素的指针来访问数组。使用动态分配的数组和使用普通数组一样简单。
13.3.1使用malloc()函数为数组分配内存
下面就使用mallocO函数来创建一个数组。在程序运行时可以使用mallocO函数来请 求一个内存块，当然还需要一个指针来存放该块在内存中的第一个单元地址。例如，考 虑如下代码：
float *p;
可以使用malloc()函数来为数组分配存储空间，与为字符串分配存储空间是类似的。 不同之处在于任意数组的元素可以是各种类型，当然也可以和字符串一样是字符型，那 么每个数组元素都未必只占有一个字节，因此需要使用sizeof运算符来计算出每个数组 元素所需要的空间大小。
在前面编写程序时，如果要使用数组，那么必须预先为其指定大小，而在有些情况 下，常常很难估计出数组适合的大小。试想下，如果能在程序运行时根据需要来确定数 组的实际大小就完美了。c语言中允许在程序执行期间为数组分配空间，并通过指向第 一个数组元素的指针来访问数组。使用动态分配的数组和使用普通数组一样简单。
13.3.1使用malloc()函数为数组分配内存
下面就使用mallocO函数来创建一个数组。在程序运行时可以使用mallocO函数来请 求一个内存块，当然还需要一个指针来存放该块在内存中的第一个单元地址。例如，考 虑如下代码：
float *p;
