(3)	若结构体变量中的成员是作为字符串使用的字符型数组，如结构体中的成员name,由 于可以将其看做“字符串变量”，因此其引用形式可以是std. name或ps - >name或（* ps). name 或 arr[o]. name〇
若要引用结构体数组arr的第0个元素arr[0]中的sex成员，可写作arr[0]. sex。注意：不能 写作am sex,因为arr是一个数组名不是变量。
(2)	若要引用结构体变量std中的数组成员sc中的元素sc[2]时，可写作std.lsc[2]或 ps - >sc[2]或（* ps)_ sc[2]，不能写成std. sc,因为sc是一个数组名，C语言不允许对数组整体 访问（字符串除外），只能逐个引用其元素。对于结构体数组arr可写作arr[0].SC[2]。
(4)	结构体变量中内嵌结构体变量成员的引用
访问结构体变量中各内嵌结构体成员时，必须逐层使用成员名定位。例如，引用结构体变量 std 中的出生年份时，可写作 std. birthday:. year、ps-> birthday, year、（* ps) . birthday, year。引用 结构体数组arr第0个兀素arr[0]中的出生年份时，可写作arr[0] ? birthday, year。注意：birthday 后面不能使用-> 运算符，因为birthday不是指针变量。对于多层嵌套的结构体，引用方式与此 类似，即按照从最外层到最内层的顺序逐层引用，每层之间用点号隔开。
(3)	若结构体变量中的成员是作为字符串使用的字符型数组，如结构体中的成员name,由 于可以将其看做“字符串变量”，因此其引用形式可以是std. name或ps - >name或（* ps). name 或 arr[o]. name〇
若要引用结构体数组arr的第0个元素arr[0]中的sex成员，可写作arr[0]. sex。注意：不能 写作am sex,因为arr是一个数组名不是变量。
(2)	若要引用结构体变量std中的数组成员sc中的元素sc[2]时，可写作std.lsc[2]或 ps - >sc[2]或（* ps)_ sc[2]，不能写成std. sc,因为sc是一个数组名，C语言不允许对数组整体 访问（字符串除外），只能逐个引用其元素。对于结构体数组arr可写作arr[0].SC[2]。
(4)	结构体变量中内嵌结构体变量成员的引用
访问结构体变量中各内嵌结构体成员时，必须逐层使用成员名定位。例如，引用结构体变量 std 中的出生年份时，可写作 std. birthday:. year、ps-> birthday, year、（* ps) . birthday, year。引用 结构体数组arr第0个兀素arr[0]中的出生年份时，可写作arr[0] ? birthday, year。注意：birthday 后面不能使用-> 运算符，因为birthday不是指针变量。对于多层嵌套的结构体，引用方式与此 类似，即按照从最外层到最内层的顺序逐层引用，每层之间用点号隔开。
(3)	若结构体变量中的成员是作为字符串使用的字符型数组，如结构体中的成员name,由 于可以将其看做“字符串变量”，因此其引用形式可以是std. name或ps - >name或（* ps). name 或 arr[o]. name〇
若要引用结构体数组arr的第0个元素arr[0]中的sex成员，可写作arr[0]. sex。注意：不能 写作am sex,因为arr是一个数组名不是变量。
(2)	若要引用结构体变量std中的数组成员sc中的元素sc[2]时，可写作std.lsc[2]或 ps - >sc[2]或（* ps)_ sc[2]，不能写成std. sc,因为sc是一个数组名，C语言不允许对数组整体 访问（字符串除外），只能逐个引用其元素。对于结构体数组arr可写作arr[0].SC[2]。
(4)	结构体变量中内嵌结构体变量成员的引用
访问结构体变量中各内嵌结构体成员时，必须逐层使用成员名定位。例如，引用结构体变量 std 中的出生年份时，可写作 std. birthday:. year、ps-> birthday, year、（* ps) . birthday, year。引用 结构体数组arr第0个兀素arr[0]中的出生年份时，可写作arr[0] ? birthday, year。注意：birthday 后面不能使用-> 运算符，因为birthday不是指针变量。对于多层嵌套的结构体，引用方式与此 类似，即按照从最外层到最内层的顺序逐层引用，每层之间用点号隔开。
