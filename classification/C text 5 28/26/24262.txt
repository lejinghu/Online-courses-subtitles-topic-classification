在程序中，保持不变且使用频繁的字符可以定义为字符型常量。这样可以避免不小心 修改了某个字符造成错误。如果将常用的字符数据定义为字符常量，则禁止修改该常量。 这样会减少错误的发生。单个字符类型的数据可以定义为字符型常量。例如，定义一个字 符常量的代码如下：
字符型常量和字符串型常量中的数据都是字符。字符型数据与字符串型数据的主要区 别是：用单引号括起来的单个字符是字符型数据，而用双引号括起来的一个或多个字符(一 般是多个)称为字符串型数据。字符型数据都可以作为字符型常量，字符串型数据都可以作 为字符串型常量。
1.	为什么要使用字符型常量和字符串型常量
const char CHAR = fMf;	/将字符定义为字符常量★/
可见，定义字符常量的方法与定义整型常量的方法一样，都是在类型说明符前面增加 一个 const。
在程序中，保持不变且使用频繁的字符可以定义为字符型常量。这样可以避免不小心 修改了某个字符造成错误。如果将常用的字符数据定义为字符常量，则禁止修改该常量。 这样会减少错误的发生。单个字符类型的数据可以定义为字符型常量。例如，定义一个字 符常量的代码如下：
字符型常量和字符串型常量中的数据都是字符。字符型数据与字符串型数据的主要区 别是：用单引号括起来的单个字符是字符型数据，而用双引号括起来的一个或多个字符(一 般是多个)称为字符串型数据。字符型数据都可以作为字符型常量，字符串型数据都可以作 为字符串型常量。
1.	为什么要使用字符型常量和字符串型常量
const char CHAR = fMf;	/将字符定义为字符常量★/
可见，定义字符常量的方法与定义整型常量的方法一样，都是在类型说明符前面增加 一个 const。
