这就是为什么externchara[]与externchara[100]等价的原因。因为这只是声明，不分配 空间，所以编译器无需知道这个数组有多少个元素。这两个声明都告诉编译器a是在别的文 件中被定义的一个数组，a同时代表着数组a的首元素的首地址，也就是这块内存的起始地 址。数组内地任何元素的的地址都只需要知道这个地址就可以计算出来。 但是，当你声明为externchar*a时，编译器理所当然的认为a是一个指针变量，在32位系 统下，占4个byte。这4个byte里保存了一个地址，这个地址上存的是字符类型数据。虽 然在文件1中，编译器知道a是一个数组，但是在文件2中，编译器并不知道这点。大多数 编译器是按文件分别编译的，编译器只按照本文件中声明的类型来处理。所以，虽然a实际 大小为100个byte，但是在文件2中，编译器认为a只占4个byte。
char a[] = “abcdefg”;
在定义数组a的时候编译器在某个地方保存了 a的 首元素的首地址OxOOOOFFOO。
我们说过，编译器会把存在指针变量中的任何数据当作地址来处理。所以，如果需要 访问这些字符类型数据，我们必须先从指针变量a中取出其保存的地址。如下图：

