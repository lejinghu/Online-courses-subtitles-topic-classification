如果字寻址计算机的基本可寻址存储单元大于一个字符，则也会发生类似的问题。在这些 计算机上，可能有一种特殊的地址（字节指针）来表示字中的字符。如果有这种字节指针，则 其可能大于非字符类型对象的指针，或使用指针中某些被忽略并在其他指针类型中通常被设置 为〇的位。C实现者要确定是否承担将所有指针表示为字节指针时增加的开销，是否只对Char 
数组寻址不管计算机是否使用分段寻址模式，一些计算机可以在数组长度较小（通常不大 于64KB)时更有效地访问数组元素。为了利用大数组，编程人员要提供特殊编译器选项或用某 种方式指定大数组。
离难度计算机尽管C语言已经在许多计算机上有效实现，但有些计算机上的数据和地址表 示方法使C语言实现非常困难D如果计算机的自然字长不是自然字节长度的倍数，则可能遇到问 题。假设（这是个真实的例子）计算机上的字长为36位，而用7位表示字符，每个字可以放五个 字符，还有一位未用。所有非字符数据类型占用一个或几个整字。因为C语言编程要把任何数据 结构映射到字符数组，所以这种内存结构对C语言实现者来说非常困难^要复制地址A中类型为r 的对象，只要复制从A开头的个字符即可。这种计算机上惟一的解决办法是用一些 非标准位数（如9或36)表示字符，使其适合字长。这种表示方法会明显地影响性能。
类型（和标准C语言中void 类型）的对象使用大格式，或者是否用整字表示每个字符。字符网 指针长度不同时，要求C语言编程人员对指针转换要更加小心。
参考章节数组类型5,4;字符类型5.1.3;函数参数转换6.3.5;函数原型9.2;指针 类型5.3;孖储单元6.1.1 6.1.6类型表示
如果字寻址计算机的基本可寻址存储单元大于一个字符，则也会发生类似的问题。在这些 计算机上，可能有一种特殊的地址（字节指针）来表示字中的字符。如果有这种字节指针，则 其可能大于非字符类型对象的指针，或使用指针中某些被忽略并在其他指针类型中通常被设置 为〇的位。C实现者要确定是否承担将所有指针表示为字节指针时增加的开销，是否只对Char 
数组寻址不管计算机是否使用分段寻址模式，一些计算机可以在数组长度较小（通常不大 于64KB)时更有效地访问数组元素。为了利用大数组，编程人员要提供特殊编译器选项或用某 种方式指定大数组。
离难度计算机尽管C语言已经在许多计算机上有效实现，但有些计算机上的数据和地址表 示方法使C语言实现非常困难D如果计算机的自然字长不是自然字节长度的倍数，则可能遇到问 题。假设（这是个真实的例子）计算机上的字长为36位，而用7位表示字符，每个字可以放五个 字符，还有一位未用。所有非字符数据类型占用一个或几个整字。因为C语言编程要把任何数据 结构映射到字符数组，所以这种内存结构对C语言实现者来说非常困难^要复制地址A中类型为r 的对象，只要复制从A开头的个字符即可。这种计算机上惟一的解决办法是用一些 非标准位数（如9或36)表示字符，使其适合字长。这种表示方法会明显地影响性能。
类型（和标准C语言中void 类型）的对象使用大格式，或者是否用整字表示每个字符。字符网 指针长度不同时，要求C语言编程人员对指针转换要更加小心。
参考章节数组类型5,4;字符类型5.1.3;函数参数转换6.3.5;函数原型9.2;指针 类型5.3;孖储单元6.1.1 6.1.6类型表示
