□判断表达式。switch关键字后面跟着的判定表达式可以是4.3节中介绍过的表达 式中的任何一种，但是判断表达式的值应该是整型，即整数值。由于C语言中 将字符当成整数来处理，因此判断表达式的值也可以是字符型。但是，判断表 达式的值决不能是浮点数或字符串。
先测试switch关键字后面的表达式是否与某个常量表达式的值相匹配，如果能匹配， 则执行其后紧跟着的语句序列，接着再执行下一个case后面的语句序列，一直到switch 语句结尾。如果表达式的值与所有case后的常量表达式的值都不相匹配，则执行default 后面的语句序列。
switch语句比if语句要更复杂，下面来看一看switch语句的各个组成部分。
□情况标号。switch语句中的每一种可能情况都以“case常量表达式：”这样的 标号形式开始。case后面的常量表达式必须是一个整型（包括char类型）常量 或整数常量表达式。常量表达式与普通的表达式类似，但是其中不能包含变量 或函数调用。例如，3是一个常量表达式，10-3也是一个常量表达式，但x+3, 其中x为变量，就不是常量表达式。要注意的是各个分支中常量表达式的值必 须互不相同。还有一点要强调的是，在C语言中没有表示数值范围的标号。
□语句序列。每个情况标号后面都可以跟着任意数量的语句。这些语句不需要使 用大括号括起来，每组语句的最后一条语句通常是break语句。break可以终止 switch语句的执行，使流程跳出switch结构。当然，如果switch语句中最后一 个分支是default,则其后的执行语句可以不加break语句。但作为一种良好的程 序设计风格，还是推荐在default分支的后面也加上一个break语句。
□判断表达式。switch关键字后面跟着的判定表达式可以是4.3节中介绍过的表达 式中的任何一种，但是判断表达式的值应该是整型，即整数值。由于C语言中 将字符当成整数来处理，因此判断表达式的值也可以是字符型。但是，判断表 达式的值决不能是浮点数或字符串。
先测试switch关键字后面的表达式是否与某个常量表达式的值相匹配，如果能匹配， 则执行其后紧跟着的语句序列，接着再执行下一个case后面的语句序列，一直到switch 语句结尾。如果表达式的值与所有case后的常量表达式的值都不相匹配，则执行default 后面的语句序列。
switch语句比if语句要更复杂，下面来看一看switch语句的各个组成部分。
□情况标号。switch语句中的每一种可能情况都以“case常量表达式：”这样的 标号形式开始。case后面的常量表达式必须是一个整型（包括char类型）常量 或整数常量表达式。常量表达式与普通的表达式类似，但是其中不能包含变量 或函数调用。例如，3是一个常量表达式，10-3也是一个常量表达式，但x+3, 其中x为变量，就不是常量表达式。要注意的是各个分支中常量表达式的值必 须互不相同。还有一点要强调的是，在C语言中没有表示数值范围的标号。
□语句序列。每个情况标号后面都可以跟着任意数量的语句。这些语句不需要使 用大括号括起来，每组语句的最后一条语句通常是break语句。break可以终止 switch语句的执行，使流程跳出switch结构。当然，如果switch语句中最后一 个分支是default,则其后的执行语句可以不加break语句。但作为一种良好的程 序设计风格，还是推荐在default分支的后面也加上一个break语句。
