所有的高级语言都支持数据类型的概念。一种数据类型定义了一类变童的取值范围和在其上操作的一 组运算。常见的数据类型是整型、字符型和浮点型。虽然C语言有5种固有的基本数据类型，但与Pascal或 Ada相比,却不是强类型语言。C几乎允许所有类型的转换，例如字符型和整型数据能够自由地混合在某一 表达式中。
低级	Macro-assembler, Assembler
作为中级语言,C允许对位、字节和地址这些计算机功能中的基本成分进行操作。尽管如此，C语言程序 还是非常容易移植的。可移植性指的是,易于把为某种计箅机写的软件改编到另一种机器或操作系统上。例 如,如果为DOS写的一个程序，能够方便地改为可以在Windows 2000下运行的程序,则称之为可移植的。
不像髙级语言那样，C几乎不进行运行时的错误检査，例如不检査数组边界是否溢出。检査运行时的错 误是程序员的责任。
同样,C并不严格要求参数和变元之间的类型兼容。正像我们从其他编程经验中了解的那样，高级计算 机语言通常要求变量的类型(或多或少地）与接收这一变量的参数的类型相一致，而C并不是这样。相反，c 的变量的类型可以是任意的，只要它能够转换成参数的类型即可。而且C可以自动完成这种转换。
所有的高级语言都支持数据类型的概念。一种数据类型定义了一类变童的取值范围和在其上操作的一 组运算。常见的数据类型是整型、字符型和浮点型。虽然C语言有5种固有的基本数据类型，但与Pascal或 Ada相比,却不是强类型语言。C几乎允许所有类型的转换，例如字符型和整型数据能够自由地混合在某一 表达式中。
低级	Macro-assembler, Assembler
作为中级语言,C允许对位、字节和地址这些计算机功能中的基本成分进行操作。尽管如此，C语言程序 还是非常容易移植的。可移植性指的是,易于把为某种计箅机写的软件改编到另一种机器或操作系统上。例 如,如果为DOS写的一个程序，能够方便地改为可以在Windows 2000下运行的程序,则称之为可移植的。
不像髙级语言那样，C几乎不进行运行时的错误检査，例如不检査数组边界是否溢出。检査运行时的错 误是程序员的责任。
同样,C并不严格要求参数和变元之间的类型兼容。正像我们从其他编程经验中了解的那样，高级计算 机语言通常要求变量的类型(或多或少地）与接收这一变量的参数的类型相一致，而C并不是这样。相反，c 的变量的类型可以是任意的，只要它能够转换成参数的类型即可。而且C可以自动完成这种转换。
