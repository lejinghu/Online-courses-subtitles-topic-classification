因为编译器可以自动处理这些转换而无需程序员介入，所以这类转换称为隐式转换 (implicit conversion)。C语言还允许程序员通过使用强制运算符执行显式转换（explicit conversion)。首先讨论隐式转换，而显式转换将会推迟到本节的后半部分进行介绍。遗憾的是， 执行隐式转换的规则有些复杂，主要是因为C语言有大量不同的基本数据类型（6种整型和3种 浮点型，这还不包括字型）。
在执行算术运算时，计算机比c语言的限制更多。为了让计算机执行算术运算，通常要求 操作数有相同的大小（即位的数量相同），并且要求存储的方式也相同。计算机可能可以直接将 两个16位整数相加，但是不能直接将16位整数和32位整数相加，也不能直接将32位整数和32位 浮点数相加。
另一方面，C语言允许在表达式中混合使用基本数据类型。在单独一个表达式中可以组合 整数、浮点数，甚至是字符。当然，在这种情况下C语言编译器可能需要生成一些指令将某些 操作数转换成不同类型，使得硬件可以对表达式进行计算。例如，如果对16位int型数和32位 long int型数进行加法操作，那么编译器将安排把16位int型值转换成32位值。如果是int型 数据和float型数据进行加法操作，那么编译器将安排把int型值转换成为float格式。这个转 换过程稍微复杂一些，因为int型值和float型值的存储方式不同。
当发生下列情况时会进行隐式转换：
?当算术表达式或逻辑表达式中操作数的类型不相同时。（C语言执行所谓的常用算术转换。）
