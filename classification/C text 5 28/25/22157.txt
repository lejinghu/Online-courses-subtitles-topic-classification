显然，每个数据的存储形式与它们的数据类型相关，数据与数据之间连续存放，没有分隔符分 隔。因此，读的时候，一定要按照整型、字符型、浮点型和双精度型的顺序读，同时，赋值时也应 该赋给同类型的变量。
000C	00	000D	21	000E	40		
显然，短整型数据128在文件中的数据存储为8_;字符型麵'a'在文件中的数据存储为61;浮点 型数据8.5f在文件中的数据存储为00000841;双精度型数据8.5在文件中的数据存储为0000000000002140。
10.1.4文件的读写方式
c语言对文件的读写方式有顺序读写和随机读写两种。对文件进行顺序读写时，每次打开文件 时文件读写指针都指向文件的起始位置，读写操作必须从文件的起始位置开始；并且每次读写数据 后读写指针会自动指向下一个数据，因此，适合对文件中的所有数据进行逐一处理。如果只需对文 件中间的某些数据进行读写操作，采用顺序读写则需不断地进行读操作来逐一向后移动读写指针， 直至移动到指定位置，这种情况非常像单向链表中的查找，效率很低。
显然，每个数据的存储形式与它们的数据类型相关，数据与数据之间连续存放，没有分隔符分 隔。因此，读的时候，一定要按照整型、字符型、浮点型和双精度型的顺序读，同时，赋值时也应 该赋给同类型的变量。
000C	00	000D	21	000E	40		
显然，短整型数据128在文件中的数据存储为8_;字符型麵'a'在文件中的数据存储为61;浮点 型数据8.5f在文件中的数据存储为00000841;双精度型数据8.5在文件中的数据存储为0000000000002140。
10.1.4文件的读写方式
c语言对文件的读写方式有顺序读写和随机读写两种。对文件进行顺序读写时，每次打开文件 时文件读写指针都指向文件的起始位置，读写操作必须从文件的起始位置开始；并且每次读写数据 后读写指针会自动指向下一个数据，因此，适合对文件中的所有数据进行逐一处理。如果只需对文 件中间的某些数据进行读写操作，采用顺序读写则需不断地进行读操作来逐一向后移动读写指针， 直至移动到指定位置，这种情况非常像单向链表中的查找，效率很低。
