函数原型作用域是从变量定义处开始一直到函数原型声明的末尾。这决定了编译器 在处理一个函数原型中的参数时，只需要关心该参数的类型，而该参数使用什么名字通 常是无关紧要的（甚至可以只写出参数类型，而不写出参数名），不需要与函数定义中 使用的变量名一致。
函数原型作用域适用于在函数原型中使用的变量。例如，下面就是一个函数原型， 其中的变量number和length就具有函数原型作用域。
int func (int number, double length);
但有一种情况比较特殊，当变长数组做函数原型的参数时，该变长数组的名字是起 作用的。例如：
void func (int m, int n, arr[m][n]);
函数原型作用域是从变量定义处开始一直到函数原型声明的末尾。这决定了编译器 在处理一个函数原型中的参数时，只需要关心该参数的类型，而该参数使用什么名字通 常是无关紧要的（甚至可以只写出参数类型，而不写出参数名），不需要与函数定义中 使用的变量名一致。
函数原型作用域适用于在函数原型中使用的变量。例如，下面就是一个函数原型， 其中的变量number和length就具有函数原型作用域。
int func (int number, double length);
但有一种情况比较特殊，当变长数组做函数原型的参数时，该变长数组的名字是起 作用的。例如：
void func (int m, int n, arr[m][n]);
