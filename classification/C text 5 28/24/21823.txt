在参数列表中定义的参数称为形式参数（简称形参），用以强调它作为占位符的角色。形参是函 数要处理的数据，在函数调用时要将实际值传递给形参。在定义变量时，相同类型的变量可以用一个 数据类型关键字定义。但是，和变量定义不同的是，每一个形参都必须有数据类型和名字。例如：
类型名说明函数返回值（即出口参数）的数据类型（简称为函数的类型或函数值的类型），可 以是除数组以外的任何类型。当返回值类型为void，函数将不返回任何值。在C89中，如果定义时 未指明函数返回值的类型，则默认函数类型为int,但是，C99标准要求任何函数都必须明确指定返 回类型，不允许默认返回int。
参数列表说明函数入口参数的名称、类型和个数，它是一个用逗号分隔的变量名及其类型列表， 它描述了在调用函数时函数所接收的参数。一个函数可能没有参数，在没有参数的情况下，参数列 表说明为void,否则必须明确地列出每一个参数的类型。在C89中，void可省略不写，在C99中 则要求用void表示无参函数。
double power (int x, int n) {…} double power (int x, n) {…} int GetNum (void) {…}
GetNum (void) {…}
在参数列表中定义的参数称为形式参数（简称形参），用以强调它作为占位符的角色。形参是函 数要处理的数据，在函数调用时要将实际值传递给形参。在定义变量时，相同类型的变量可以用一个 数据类型关键字定义。但是，和变量定义不同的是，每一个形参都必须有数据类型和名字。例如：
类型名说明函数返回值（即出口参数）的数据类型（简称为函数的类型或函数值的类型），可 以是除数组以外的任何类型。当返回值类型为void，函数将不返回任何值。在C89中，如果定义时 未指明函数返回值的类型，则默认函数类型为int,但是，C99标准要求任何函数都必须明确指定返 回类型，不允许默认返回int。
参数列表说明函数入口参数的名称、类型和个数，它是一个用逗号分隔的变量名及其类型列表， 它描述了在调用函数时函数所接收的参数。一个函数可能没有参数，在没有参数的情况下，参数列 表说明为void,否则必须明确地列出每一个参数的类型。在C89中，void可省略不写，在C99中 则要求用void表示无参函数。
double power (int x, int n) {…} double power (int x, n) {…} int GetNum (void) {…}
GetNum (void) {…}
在参数列表中定义的参数称为形式参数（简称形参），用以强调它作为占位符的角色。形参是函 数要处理的数据，在函数调用时要将实际值传递给形参。在定义变量时，相同类型的变量可以用一个 数据类型关键字定义。但是，和变量定义不同的是，每一个形参都必须有数据类型和名字。例如：
类型名说明函数返回值（即出口参数）的数据类型（简称为函数的类型或函数值的类型），可 以是除数组以外的任何类型。当返回值类型为void，函数将不返回任何值。在C89中，如果定义时 未指明函数返回值的类型，则默认函数类型为int,但是，C99标准要求任何函数都必须明确指定返 回类型，不允许默认返回int。
参数列表说明函数入口参数的名称、类型和个数，它是一个用逗号分隔的变量名及其类型列表， 它描述了在调用函数时函数所接收的参数。一个函数可能没有参数，在没有参数的情况下，参数列 表说明为void,否则必须明确地列出每一个参数的类型。在C89中，void可省略不写，在C99中 则要求用void表示无参函数。
double power (int x, int n) {…} double power (int x, n) {…} int GetNum (void) {…}
GetNum (void) {…}
