比如程序7.15中的convertNumber()函数，它成功地将变量 numberToConvert中存储的一个数字转换为一"t?基数，该基数由变量base 的值指定。此外，还必须定义变量digit和数组convertedNumber。这个 函数有一种要灵活得多的版本，它允许向函数传送这些参数。
请注意这些精心选择的函数名是如何让程序7.15执行的操作变得明了的。 main ()例程中表明了程序的功能：获取一个数字和基数，转换数字，然后显 示转换后的数字。相对于第6章的对应程序，这一程序的易读性大大提高，其 直接原因就是将程序结构变为一些独立的函数，用来执行小而明确的任务。注 意，甚至不需要main ()例程中的注释语句来描述这个程序的功能——函数名 已经表明了自己的用途。
全局变量主要应用于有多个函数必须访问同一变量取值的程序中。这样就 不需要将这个变量的值作为参数传送给每个独立函数，这些函数可以明确引用 该变量。这种方法有一个缺点。因为函数是明确引用一个特定全局变量的，所 以函数的通用性会有一定程度的减弱。因此，在每次使用该函数时，都要确保 该全局变量存在，而且名字无误。
尽管利用全局变量可以减少需向函数传送的参数个数，但其代价是降低了 函数的通用性，在某些情况下，会降低程序的易读性。这一程序易读性问题源 于一个事实：如果使用全局变量，那仅靠查看函数头就无法明了一个特定函数 使用的变量。另外，读者也就无法通过对特定函数的调用来获悉这个函数需要 什么类型的参数作为输入，或者会生成什么类型的输出。
一些程序员采用一种约定：为所有全局变量名都添加字母“g”作为前缀。 例如，他们为程序7.15给出的变量声明可能如下所示：
