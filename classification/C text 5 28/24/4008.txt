由于文件filel中的extern声明不仅放在函数定义的外面，而且还放在它们的前面，因此它 们适用于该文件中的所有函数。对于filel，这样一组声明就够了。如果要在同一个文件中先 使用、后定义变量sp与val，也需要按照这种方式来组织文件。
在文件file2中：
int sp= 0; double val[MAXVAL];
4.5.头文件
下面我们来考虑把上述的计算器程序分割到若干个源文件中的情况。如果该程序的各组 成部分很长，这么做还是有必要的。我们这样分割：将主函数main单独放在文件main.c 中；将push与pop函数以及它们使用的外部变量放在第二个文件stack.c中；将getop 函数放在第三个文件getop.c中;将getch与ungetch函数放在第四个文件getch.c中。 之所以分割成多个文件，主要是考虑在实际的程序中，它们分别来自于单独编译的库。
由于文件filel中的extern声明不仅放在函数定义的外面，而且还放在它们的前面，因此它 们适用于该文件中的所有函数。对于filel，这样一组声明就够了。如果要在同一个文件中先 使用、后定义变量sp与val，也需要按照这种方式来组织文件。
在文件file2中：
int sp= 0; double val[MAXVAL];
4.5.头文件
下面我们来考虑把上述的计算器程序分割到若干个源文件中的情况。如果该程序的各组 成部分很长，这么做还是有必要的。我们这样分割：将主函数main单独放在文件main.c 中；将push与pop函数以及它们使用的外部变量放在第二个文件stack.c中；将getop 函数放在第三个文件getop.c中;将getch与ungetch函数放在第四个文件getch.c中。 之所以分割成多个文件，主要是考虑在实际的程序中，它们分别来自于单独编译的库。
