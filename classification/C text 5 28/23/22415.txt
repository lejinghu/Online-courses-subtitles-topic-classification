这就是为什么说效率几乎就是一切但也并不是绝对的道理。如果得到的结果是不正确 的，那么效率再高又有什么意义呢？编译器设计者通常会提供一些编译器选项。这样，每个 程序员可以选择自己想要的优化措施。B语言不算成功，而Dennis Ritchie所创造的注重效率 的“New B”却获得了成功，充分证明了编译器设计者的这条金科玉律3
在编译器中，效率几乎就是一切。当然还有一些其他需要关心的东西，如有意义的错误 信息、良好的文档和产品支持。但与用户需要的速度相比，这些因素就黯然失色了。编译器 的效率包括两个方面：运行效率（代码的运行速度）和编译效率（产生可执行代码的速度）t 除了一些开发和学习环境之外，运行效率起决定性作用。
有很多编译优化措施会延长编译时间，但却能缩短运行时间。还有一些优化措施（如清 除无用代码和忽略运行时检查等）即能缩短编译时间，又能减少运行时间，同时还能减少内 存的使用量。这些优化措沲的不利之处在于可能无法发现程序中无效的运行结果。优化措施 本身在转换代码时是非常i堇慎的，但如果程序员编写了无效的代码（如：越过数组边界引用 对象，因为他们“知道”附近有他们需要的变量）就可能引发错误的结果。
B语言通过省略一些特性（如嵌套过程和一些循环结构），对BCPL语言作了简化，并发 扬了 “引用数组元素相当于对指针加上偏移量的引用”这个想法。B语言同时保持了 BCPL 语言无类型这个特点，它仅有的操作数就是机器的字。Thomposon发明了++和--操作符，并 把它加入到PDP-7的B编译器中。它们在C语言中依然存在，很多人天真地以为这是由于 PDP-11存在对应的自动增/减地址模型，这种想法是错误的！自动增/减机制的出现早于 PDP-11硬件系统的出现。尽管在C语言中，拷贝字符串中的一个字符的语句：
★P + +	=	 S + +；
