函数malloc从已申请的存储空间中寻找大小合适的存储区返回给调用者;如果找不到足够大的 存储区，那么再通过库函数sbrk向操作系统申请。函数calloc与函数malloc的主要区别在于calloc 会将返回给调用者的存储区初始化为全零；函数realloc修改已分配的动态存储区大小，尽量保留修 改前存储区中的数据；函数free释放已分配的动态存储区，合并相邻的空闲存储碎片。这里主要介 绍函数malloc和free的设计和实现，设计思想参照了 Brain W. Kemighan与Dennis M. Ritchie所著 《The C Programming Language》一书相关内容，但该书在设计上存在缺陷，导致函数free因无法判 断所释放的是否为动态存储区，而可能将普通变量的存储区释放掉。本设计对此缺陷进行了改善。
Linux系统下GNU C的库函数sbrk可以向操作系统请求存储空间作为进程的动态存储区。由 于向系统申请存储空间的操作比较耗时，而且可供申请的空间是有限的，所以需要对所申请的存储 空间进行管理，提高使用效率，减少申请次数。这就是为什么不直接使用库函数sbrk,而是另行设 计动态存储分配库函数来管理动态存储空间的目的。
16.2.1	allocation 库的设计
由于通过库函数sbrk申请到的存储空间不一定是连续的，所以设计一种链式结构将每次用sbrk 申请到的存储空间连接起来，这样便于管理这些存储区。图16.1示意了这种链式结构。
						
