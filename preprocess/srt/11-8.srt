1
00:00:00,000 --> 00:00:04,540
那么刚才呢，我们介绍了整型和

2
00:00:04,540 --> 00:00:09,080
浮点型。那么接下来呢我们再介绍一下字符型。

3
00:00:09,080 --> 00:00:15,840
那关于字符型呢，大家都比较熟悉了。因为无论是在抄程序或者是写程序的环节呢，

4
00:00:15,840 --> 00:00:22,600
我们都接触到过。那么在这呢，我想强调这么一点，一个字符型的数啊，

5
00:00:22,600 --> 00:00:27,840
在内存中所占的空间是一个字节。因为是一个字节，

6
00:00:27,840 --> 00:00:33,080
通过这个信息啊，我们可以推演出来很多有用的信息。

7
00:00:33,080 --> 00:00:38,245
比方说一个字符在内存里边肯定要转换成相应的

8
00:00:38,245 --> 00:00:43,410
数字来保存。比方说我们定义一个这样的字符型的变量

9
00:00:43,410 --> 00:00:50,885
a等于@，用单引号把它引起来。注意这里一定是单引号，啊，是不允许

10
00:00:50,885 --> 00:00:58,360
用双引号的。双引号是字符串，以后我们再说。那么@是一个字符，它没办法直接存在

11
00:00:58,360 --> 00:01:02,940
内存里头。它必须要转换成相应的数字来保存。

12
00:01:02,940 --> 00:01:08,185
既然要转换成数字来保存，我就一定要搞清楚哪个

13
00:01:08,185 --> 00:01:13,430
字符跟哪个数是对应的。比方说，在这呢

14
00:01:13,430 --> 00:01:21,085
@对应于64。当然我们知道64的二进制表示是这样的：01000000。

15
00:01:21,085 --> 00:01:28,740
这就是一个字符在内存中的表示方式。通过这种表示方式我们就可以想到几个问题。

16
00:01:28,740 --> 00:01:35,540
第一个就是如果我定义了一个字符型的变量，我可以把哪些字符

17
00:01:35,540 --> 00:01:42,340
赋给这个变量呢？那从道理上讲，可以把任何可以出现在C或者C++语言中的字符

18
00:01:42,340 --> 00:01:48,830
赋给这个字符型的变量。当然，我们需要定义哪些字符是可以出现在C

19
00:01:48,830 --> 00:01:55,320
或者C++语言中的字符，我们需要做一个定义。这是我们知道的第一个信息。那肯定

20
00:01:55,320 --> 00:02:03,320
存在这么一个定义。第二个信息，那么这些被定义下来的字符，应该有多少个呢？

21
00:02:03,320 --> 00:02:09,345
因为在内存里头我们就使用了一个字节来表示一个字符型的数，

22
00:02:09,345 --> 00:02:15,370
然而一个字节所能够表示的最多的数的数量是

23
00:02:15,370 --> 00:02:21,015
2的8次幂，也就是256。

24
00:02:21,015 --> 00:02:26,660
所以说我们要定义一个字符集的话，这个字符集的大小一定不会超过

25
00:02:26,660 --> 00:02:34,660
256个字符。所以我们可以预想出来，一定存在这样一个字符集。

26
00:02:34,660 --> 00:02:39,620
首先它规定了C语言中能够出现的一些字符，同时呢

27
00:02:39,620 --> 00:02:44,580
我们还知道这个字符集中字符的数量不会超过256个。

28
00:02:44,580 --> 00:02:50,900
那么这个字符集呢，其实就是ASCII码集。
那ASCII码实际上指的American

29
00:02:50,900 --> 00:02:56,125
Standard Code for Information
Interchange。也就是说，

30
00:02:56,125 --> 00:03:03,670
美国标准信息交换码。ASCII码呢，是由美国国家标准局，也就是ANSI来制定的。

31
00:03:03,670 --> 00:03:09,360
那么经，后来呢经过稍微的修改，被ISO接纳为国际标准。

32
00:03:09,360 --> 00:03:16,925
那么在这呢，我也提供了一个相应的国际标准的链接。如果感兴趣的同学呢，可以去看一下。

33
00:03:16,925 --> 00:03:24,490
那么在ASCII，在ASCII码集里头呢，现在呢一共包含了256个字符的一个定义。

34
00:03:24,490 --> 00:03:32,390
大家可以从这看得到。从这个背景上呢感受一下。有同学说，你挡住了。没关系，这个字符集，

35
00:03:32,390 --> 00:03:38,570
你在因特网上太多太多了，随便一搜就可以拿到。比方说在这个字符集里头刚才我们所定义的

36
00:03:38,570 --> 00:03:44,750
@号，它所对应的数就是64。那么64所对应的

37
00:03:44,750 --> 00:03:50,650
8位二进制数也就是01000000。

38
00:03:50,650 --> 00:03:56,480
所以说啊，对于一个字符型的变量，它的取值不会超过这256个字符。

39
00:03:56,480 --> 00:04:02,090
当然在这256个字符中啊，有一些字符啊是属于不可见字符。

40
00:04:02,090 --> 00:04:07,700
啊，那么这些字符的含义呢，在ASCII码表里面都有清晰的定义，大家可以去参考。

41
00:04:07,700 --> 00:04:15,765
Okay，这是关于字符型。
那么接下来呢，我们也介绍两点关于字符型数据的使用须知。第一个，

42
00:04:15,765 --> 00:04:21,070
通过刚才我们这个介绍你可以知道，字符型它的存储的方式跟

43
00:04:21,070 --> 00:04:23,570
整型是相同的。

44
00:04:23,570 --> 00:04:29,390
啊，因为字符型就是要转换成一个整数去存储。

45
00:04:29,390 --> 00:04:36,500
而且这个数呢，位于0到255之间。
正因为，

46
00:04:36,500 --> 00:04:43,055
字符型的存储和整型是相同的，所以啊在程序里头啊，我们可以把字符型的数

47
00:04:43,055 --> 00:04:49,610
与整型的数据进行互相的赋值。也可以啊把一个字符型的数和一个整数放到一起

48
00:04:49,610 --> 00:04:57,610
进行运算。好我们来看一个例子，大家就明白了。看这个程序。在这个程序里头啊，我定义了几个

49
00:04:57,610 --> 00:05:02,175
变量。a是一个字符型的变量，但是我给它赋值呢，

50
00:05:02,175 --> 00:05:06,740
赋64。通过刚才的例子，我们都知道64所对应的的字符是@。

51
00:05:06,740 --> 00:05:12,130
b呢，是一个int型的变量，但是我给它赋值呢，赋大Z。

52
00:05:12,130 --> 00:05:17,520
然后c呢，是一个变量，它的值呢等于b减a。

53
00:05:17,520 --> 00:05:24,240
最后呢我还定义了一个字符型就是d，但是给它赋值的时候啊，我故意超出了0到255的这个范围。也就是说，

54
00:05:24,240 --> 00:05:30,960
这个数已经超出了一个8位的二进制数所能够表示的范围了。

55
00:05:30,960 --> 00:05:36,100
那么当程序把这个数赋给d的时候，怎么做呢？

56
00:05:36,100 --> 00:05:41,240
无论这个数有多大，我就把低八位截取下来，然后赋给前面的数。

57
00:05:41,240 --> 00:05:47,070
它是这么来做的。Okay，最后呢我把a，b，c，d都打印出来。我们来看一看这个程序的输出。

58
00:05:47,070 --> 00:05:52,900
先输出a。因为a呢赋值是@，所以说输出来是@，啊，对的。

59
00:05:52,900 --> 00:06:00,900
那么，再输出b。因为b呢等于大Z，那我们去查一下ASCII码表的话我就知道，

60
00:06:00,900 --> 00:06:06,470
大Z对应的数，啊，所对应的十进制数应该是90。啊，这个也是

61
00:06:06,470 --> 00:06:12,040
对的。那么90减去64，结果是26。c的结果也是对的。

62
00:06:12,040 --> 00:06:16,420
因为d呢，刚才说是超出了大小，那么要进行低位

63
00:06:16,420 --> 00:06:20,800
的截断。截断以后呢，得到的值是这个。

64
00:06:20,800 --> 00:06:27,205
这个值呢，其实在ASCII码表里面，是表示6。

65
00:06:27,205 --> 00:06:33,610
跟数字6是对应的。啊，通过推演呢我们也知道，这个也是正确的。

66
00:06:33,610 --> 00:06:38,525
这是关于字符型数据的一个使用方式。也就说字符型的数啊，

67
00:06:38,525 --> 00:06:43,440
可以跟整型的数混着用。但是需要注意的就是字符型的数，

68
00:06:43,440 --> 00:06:50,015
它的表示长度只有一个字节，也就是8位。

69
00:06:50,015 --> 00:06:56,590
那么关于字符型的运算或者赋值呢，我们在底下的运算成分里面还会再提到。

70
00:06:56,590 --> 00:07:03,600
这是第一个需要跟大家讨论的使用须知。除此之外呢，还有一个。看这个程序。

71
00:07:03,600 --> 00:07:09,190
这个程序非常的简单。两句cout。第一个呢，打印出来一句话，

72
00:07:09,190 --> 00:07:14,780
This is the first line!
然后呢，后面有一个反斜杠n。

73
00:07:14,780 --> 00:07:18,450
我们，在这个程序里头啊，我们要介绍的就是这个东西。

74
00:07:18,450 --> 00:07:25,725
呃，别着急，我们再看看第二句。第二句里头呢，cout了反斜杠a，双反斜杠，然后呢，

75
00:07:25,725 --> 00:07:33,000
再来一个反斜杠n。首先，反斜杠n，既然我可以把它放到单引号里面，证明它是一个

76
00:07:33,000 --> 00:07:37,630
字符。那么这种字符呢，被称为转义字符。

77
00:07:37,630 --> 00:07:41,400
那这转义字符分别表示什么含义呢？我们来看一下。

78
00:07:41,400 --> 00:07:49,175
反斜杠n啊，其实表示换行。就相当于endl。

79
00:07:49,175 --> 00:07:56,950
反斜杠a，啊，这个有意思了。在这个程序里头如果遇到反斜杠a的话，那输出的是什么呢？啊，这个输出的不是一个字符，而是一个声音。

80
00:07:56,950 --> 00:08:02,140
“滴”，响一下。双反斜杠的含义呢，就是输出一个反斜杠。

81
00:08:02,140 --> 00:08:07,330
也就是说啊，在计算机，我想输出一些信息，无论是换行，无论是让它响一下，

82
00:08:07,330 --> 00:08:09,180
那么这些都是一些信息。

83
00:08:09,180 --> 00:08:15,670
那么这些信息呢，我借助于转义字符这种方式啊来表示。

84
00:08:15,670 --> 00:08:22,815
这就是转义字符的这个含义。表示这个程序的输出就是这样的。首先输出一行，接下来

85
00:08:22,815 --> 00:08:29,960
换行，这是反斜杠n。然后再接下来呢，这个时候计算机要“滴”响一声。然后打印输出一个

86
00:08:29,960 --> 00:08:33,470
反斜杠，与双反斜杠是对应的。

87
00:08:33,470 --> 00:08:39,080
那么最后呢，再来一个换行。我故意把光标的位置来标示出来。所以说呢，

88
00:08:39,080 --> 00:08:44,690
在反斜杠输出之后呢再输出了一个换行，跟这个输出完全是对应的。

89
00:08:44,690 --> 00:08:49,450
通过这个程序啊，我希望大家知道，

90
00:08:49,450 --> 00:08:58,280
啊，有一种东西叫做转义字符。它是呢利用字符的方式来表达一些相关的信息。
Okay，这是关于字符数据的使用。

