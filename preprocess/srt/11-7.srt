1
00:00:00,000 --> 00:00:06,620
在探讨完整数以后啊，我们接下来探讨一种新的数据类型，

2
00:00:06,620 --> 00:00:13,240
也就是浮点型。那么浮点型又称为实型。跟整型一样，

3
00:00:13,240 --> 00:00:17,975
浮点型啊，也分了几种子类型。第一种称为

4
00:00:17,975 --> 00:00:22,710
float，就是典型的浮点型。第二个称为double型，

5
00:00:22,710 --> 00:00:26,544
就是双精度浮点型。还有一个long

6
00:00:26,544 --> 00:00:34,250
double型， 也就是说长双精度浮点型。啊，就是3种不同的类型。

7
00:00:34,250 --> 00:00:39,695
那么在Visual C++的环境中，一个float型的数占了

8
00:00:39,695 --> 00:00:45,140
32位的存储空间，也就是4个字节。

9
00:00:45,140 --> 00:00:49,806
一个double型的数呢，占了64位，也就是8个字节。
那么一个long

10
00:00:49,806 --> 00:00:56,005
double类型的数呢，也是占了8个字节，64位。我们可以看到与整数类型

11
00:00:56,005 --> 00:01:03,380
非常相似。那么在VC的环境里头double型和long double型其实是一样的。

12
00:01:03,380 --> 00:01:09,105
那么一个float类型的数呢，它的表示范围是从

13
00:01:09,105 --> 00:01:14,830
负的3.4乘以10的38次幂到正的3.4乘以10的38次幂。这个范围非常非常大了。

14
00:01:14,830 --> 00:01:22,185
但是我需要提示大家， 虽然它的表示范围很大，但它的精度只有7位。那么double型

15
00:01:22,185 --> 00:01:27,690
它的表示范围是1.7乘以10的308次幂，这个就更大了。它的精度呢，

16
00:01:27,690 --> 00:01:35,690
可以到15位。那么long double型呢，精度也是15位。表示范围也是一样的。

17
00:01:35,690 --> 00:01:40,070
这是关于浮点型。那什么叫做精度呢？

18
00:01:40,070 --> 00:01:45,850
我们下面通过一个例子来感受一下什么叫精度。
看这个例子。

19
00:01:45,850 --> 00:01:51,335
那在这个例子里头啊。我定，我分别定义了3个浮点类型的数。

20
00:01:51,335 --> 00:01:57,360
分别是：a， float型；b， double型；c， long

21
00:01:57,360 --> 00:02:05,730
double型。啊，3种不同的数据类型。然后呢，
我给它赋一个初始值。这个初始值是多少呢？

22
00:02:05,730 --> 00:02:10,230
是圆周率。它的精度到小数点后100位。

23
00:02:10,230 --> 00:02:18,120
那么赋完值以后呢，我紧接着把这3个数打印输出。那请问我会得到什么结果呢？

24
00:02:18,120 --> 00:02:26,010
有的同学说：“那刚才你不是说了吗？它的精度是7，它的精度是15，它的精度是15，

25
00:02:26,010 --> 00:02:30,795
所以说应该按这个打印出来。” Ok，我们看一下运行结果。运行结果是这样的。

26
00:02:30,795 --> 00:02:35,580
3.14159，啊，只打印这么多。为什么呢？

27
00:02:35,580 --> 00:02:42,510
原因很简单。cout输出一个浮点型的数的时候，

28
00:02:42,510 --> 00:02:49,440
默认情况下打印6位精度。那有没有办法可以让cout打印更多的精度呢？

29
00:02:49,440 --> 00:02:54,645
当然可以。看这个程序。在这，

30
00:02:54,645 --> 00:02:59,850
我就给cout专门设置了一个打印精度叫setprecision，这又是一个

31
00:02:59,850 --> 00:03:04,810
操作控制符。设置精度到100。也就是说它会打印

32
00:03:04,810 --> 00:03:09,030
100位的有效数字。然后呢，我把a，

33
00:03:09,030 --> 00:03:16,845
b，和c都打印出来。有人说，那你只设置了a。没关系，在这设置了精度以后呢，b和c

34
00:03:16,845 --> 00:03:24,660
默认的也按照上面的精度去打印。那这个程序的执行结果会是怎么样呢？会不会把小数点后100位的圆周率全部打印出来呢？

35
00:03:24,660 --> 00:03:31,485
我们来看一下运行结果。第一个打印a的时候，打印出了3.14159

36
00:03:31,485 --> 00:03:38,310
后面，我们对比一下这个数和我们输进去的圆周率的这个数我们就会发现，

37
00:03:38,310 --> 00:03:42,900
其实这个数字呢，只有前面的7位

38
00:03:42,900 --> 00:03:47,490
是正确的。那么7位以后呢就不正确了。

39
00:03:47,490 --> 00:03:53,955
这儿得到一个7，从这个7开始，数字就变得不正确了。通过这个例子我们可以看到，

40
00:03:53,955 --> 00:04:00,420
那么对于一个float型的数，虽然你给它一个精度很高的数字，但它只能保留到7位，

41
00:04:00,420 --> 00:04:08,210
啊，确保前7位是有效的。再看后面的b和c。b和c呢，我们对比一下我们发现，其实呢，

42
00:04:08,210 --> 00:04:10,690
他们的前15位

43
00:04:10,690 --> 00:04:18,580
都是跟圆周率是相同的。也就是说它们的精度是15位。所以通过这个例子我们可以感受到，

44
00:04:18,580 --> 00:04:23,945
对于一个计算机里头保存的浮点型的数，

45
00:04:23,945 --> 00:04:29,310
它一定是有它的精度限制的。那么超出这个精度之后呢，它就会变得不准确。

46
00:04:29,310 --> 00:04:36,715
之所以会有这个结果，是由于浮点型的存储方式所造成的。在这呢，

47
00:04:36,715 --> 00:04:44,120
我们就分析一下浮点数的表示方式。那么在这呢，我们以float型为例。

48
00:04:44,120 --> 00:04:48,570
那么对于其他类型呢，类似的情况，我们就不再做深入的分析了。

49
00:04:48,570 --> 00:04:56,550
那么大家都知道，那么float型呢在内存中啊占用了32位的内存空间。

50
00:04:56,550 --> 00:05:04,530
那么为了表示一个浮点数啊，这32位啊被分成了3个部分。为了说明这3个部分分别表示什么含义呢，我们举一个例子。

51
00:05:04,530 --> 00:05:11,300
比方说我们想要表示的数啊，是314点16。

52
00:05:11,300 --> 00:05:17,090
啊，那么首先我们把这个数做一个转换。转换成这种方式：

53
00:05:17,090 --> 00:05:22,880
负的3.1416乘以10的2次幂。

54
00:05:22,880 --> 00:05:29,260
表示成这种方式。然后呢我们来看一下，那么float型的3个部分怎么来表示

55
00:05:29,260 --> 00:05:35,640
这个数的。Ok，我们先来看第一个部分。那么float型的数的第一部分呢，是一个符号位。

56
00:05:35,640 --> 00:05:40,935
啊，它表示这个数是个正数，还是负数。那么在这个数上呢，

57
00:05:40,935 --> 00:05:46,230
这部分就由它来表示。再看第二部分。第二个部分呢，

58
00:05:46,230 --> 00:05:53,040
它是一个，是一个8位的指数位。那这个部分的作用是什么呢？这个部分的作用是来表示它。

59
00:05:53,040 --> 00:05:58,125
来表示这个部分。它呢，由这个8位的指数位

60
00:05:58,125 --> 00:06:03,210
来表示。那最后的一个部分是用来表示数字的。

61
00:06:03,210 --> 00:06:09,300
它是一个23位的二进制小数。那么它呢所表示的部分是这个部分。

62
00:06:09,300 --> 00:06:15,380
这部分所保存的就是

63
00:06:15,380 --> 00:06:21,460
这个数值部分的二进制小数位。那么既然存在这样的对应关系啊，

64
00:06:21,460 --> 00:06:27,985
我们也就不难计算出来一个float型的数它的表示范围。比方说啊，

65
00:06:27,985 --> 00:06:34,510
因为在float型的数字里头啊我们用了8位来表示一个指数，其中呢含了一个符号位。

66
00:06:34,510 --> 00:06:42,390
也就是说在这个部分啊，它能够表示的最大的数应该是2的127次幂。为什么是127呢？

67
00:06:42,390 --> 00:06:50,390
是因为除去一位符号位之外，那么剩下的7位所能表示的最大的数就是127。

68
00:06:50,390 --> 00:06:54,745
又因为这个数呢跟它，是有一个对应关系的。

69
00:06:54,745 --> 00:06:59,100
所以说我们就可以计算出来，它最大能表示10的多少次幂呢？

70
00:06:59,100 --> 00:07:04,390
大约是38次幂，这样的一个对应关系。那么再看这个部分，

71
00:07:04,390 --> 00:07:09,680
因为呢在这所采用的是二进制的小数表示方式，

72
00:07:09,680 --> 00:07:14,230
而且呢，默认是以这种方式，1点x，x，x。

73
00:07:14,230 --> 00:07:20,520
为什么是1点x，因为如果第一位是0的话，我们就可以再进一位，把它变成1。

74
00:07:20,520 --> 00:07:25,810
所以说在这实际上有效的数字应该是

75
00:07:25,810 --> 00:07:31,100
24位。也就是说在这个部分我能够表示的最大的数是2

76
00:07:31,100 --> 00:07:36,820
的24次幂。这样呢我们就可以计算出2, 2的24次幂所对应的

77
00:07:36,820 --> 00:07:41,840
10进制数的位数。

78
00:07:41,840 --> 00:07:46,860
用log以10为底，2的24次幂。最后我们就可以得得出来呢，大约是

79
00:07:46,860 --> 00:07:51,895
7.225。
所以说对于一个float型的数，它最

80
00:07:51,895 --> 00:07:56,100
多能表示的精度大约是7位。

81
00:07:56,100 --> 00:08:04,310
那么它所能表示的数的范围是10的38次幂。
啊，这就是这样的一个关系。

82
00:08:04,310 --> 00:08:09,870
Ok，那么对于浮点数呢，那在这我也需要做一个说明。那么对于浮点数的

83
00:08:09,870 --> 00:08:15,430
表示和存储方式，我们在这个课上是不做任何要求的。

84
00:08:15,430 --> 00:08:20,455
我在这儿呢只是做一个简单的介绍，让大家了解就可以了。而且呢，

85
00:08:20,455 --> 00:08:25,480
我想要提示大家的是，关于浮点数的精度的问题确实是一个比较啰嗦的问题。

86
00:08:25,480 --> 00:08:29,180
我不希望大家一开始就陷入这样的细节。

87
00:08:29,180 --> 00:08:36,385
当然呢，如果感兴趣的同学，我在这儿呢，提供一份很重要的资料。这个资料

88
00:08:36,385 --> 00:08:43,590
呢就是IEEE对于浮点数计算的一个标准，

89
00:08:43,590 --> 00:08:51,590
也就是著名的IEEE的754标准。那这个标准呢制定得非常的成功，在业界呢受到很多的赞誉。在这个标准里头呢，

90
00:08:51,590 --> 00:08:57,510
关于浮点数如何去表示，如何存储，以及如何计算进行了精确的描述。也就是说啊，

91
00:08:57,510 --> 00:09:03,430
大家如果将来用到关于浮点数的计算，那么可以来参考这个标准。

92
00:09:03,430 --> 00:09:11,200
这个标准呢，非常容易在互联网上搜索到它的原文。而且也不是特别长。大家可以下载下来观摩一下。

93
00:09:11,200 --> 00:09:15,365
那么同时呢，与这个标准相对应的ISO

94
00:09:15,365 --> 00:09:19,530
国际标准化组织，它呢，也发布了一个相应的标准，

95
00:09:19,530 --> 00:09:27,530
关于浮点数计算的。在这呢，我也给了一个网址。大家如果对这个感兴趣的话呢，也可以到这个网址去看看。当然

96
00:09:27,530 --> 00:09:33,300
这两个标准呢，基本一致，稍有不同。OK，关于浮点数呢，我们就介绍这么多。

97
00:09:33,300 --> 00:09:39,070
最后呢，我们介绍一点关于浮点数的使用须知。

98
00:09:39,070 --> 00:09:46,435
看这个例子。
那么在这个程序里头我定义了两个float型的数，a和b。然后呢，给a赋值。

99
00:09:46,435 --> 00:09:51,530
a等于123456.789e的5次幂。

100
00:09:51,530 --> 00:09:59,430
那么在这儿呢，我们输入这个数据的时候使用了科学记数法。这是可以的，那么这个数呢实际上就相当于是

101
00:09:59,430 --> 00:10:06,180
乘以10的5次幂。也就等于，那这个数字呢，也就等于

102
00:10:06,180 --> 00:10:12,930
1.23456789乘以10的10次幂。

103
00:10:12,930 --> 00:10:17,990
也就说我们的程序是可以接受科学记数法的输入的。

104
00:10:17,990 --> 00:10:23,050
那么a是这样的一个数字。那么在程序里头呢，b等于a加20。

105
00:10:23,050 --> 00:10:27,470
然后呢，我要求把b打印输出。

106
00:10:27,470 --> 00:10:31,890
啊，精度呢我希望在20位。那么对这个程序而言，20位是足够的。

107
00:10:31,890 --> 00:10:38,570
那么这个程序的运行结果会是怎样的呢？那么通过我们自己简单的一个计算我们就可以知道，这个结果

108
00:10:38,570 --> 00:10:45,250
实际上应该等于12345678920，

109
00:10:45,250 --> 00:10:51,700
应该等于这个结果。这个程序运行的结果会是多少呢？我们来看一下。

110
00:10:51,700 --> 00:10:58,150
程序运行的结果是这样的：1234567后面8848。为什么会是这个结果呢？

111
00:10:58,150 --> 00:11:03,005
因为float型它的计算精度最多是7位。

112
00:11:03,005 --> 00:11:07,860
也就是说，7位之外就是超出了计算精度的部分。

113
00:11:07,860 --> 00:11:15,335
也就意味着，虽然正确的结果应该是这样的，但是这个结果对于float型的数据而言，

114
00:11:15,335 --> 00:11:22,810
已经不在它的精度范围之内了。那么这个例子告诉我们什么呢？告诉我们这样一件事情，

115
00:11:22,810 --> 00:11:30,810
就说我们在计算的时候啊，应该尽量避免把一个很大的数与一个很小的数

116
00:11:30,810 --> 00:11:35,235
直接进行相加或者相减的运算。否则由于float型的

117
00:11:35,235 --> 00:11:39,660
精度的问题，有可能这个很小的数就要丢失掉了。

118
00:11:39,660 --> 00:11:47,050
就像这个例子里头，那么这个20加不加，最后的结果里头根本就看不出来。

119
00:11:47,050 --> 00:11:56,750
这是在使用浮点型的数的时候特别需要注意的一个问题。
Ok，这是关于浮点型的数。

